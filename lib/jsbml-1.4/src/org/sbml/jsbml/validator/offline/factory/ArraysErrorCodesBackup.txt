#
#
# This file contain a part of the SBMLErrorCodes.java
# generated by hand. Until the errors appear in libSBML
# python bindings, we need to add this block by hand
# after the SBMLErrorCodes.java was re-generated from
# the JSON file
#
#

# class javadoc
/**
 * Automatically generated file, using the python scripts extractErrors.py and createErrorCodeInterface.py
 *
 */

# arrays error codes
	/**
 	 * To conform to Version 1 of the Arrays package specification for SBML Level 3, an SBML docu-
     * ment must declare the use of the following XML Namespace:
     * “http://www.sbml.org/sbml/level3/version1/arrays/version1”. (Reference: SBML Level 3
     * Package Specification for Arrays, Version 1, S
 	 */
 	public static final int ARRAYS_10101 = 8010101; 
 	
 	/**
 	 * Wherever they appear in an SBML document, elements and attributes from the Arrays package
     * must be declared either implicitly or explicitly to be in the XML namespace
     * “http://www.sbml.org/sbml/level3/version1/arrays/version1”. (Reference: SBML Level 3
     * Package Specification for Arrays, Version 1, Section 3.1 on page 6.)
 	 */
 	public static final int ARRAYS_10102 = 8010102; 

 	/**
 	 * In all SBML documents using the Arrays package, the SBML object must include a value for the
     * attribute arrays:required attribute. (Reference: SBML Level 3 Version 1 Core, Section 4.1.2.)
 	 */
 	public static final int ARRAYS_10201 = 8010201; 

 	/**
 	 * The value of attribute arrays:required on the SBML object must be of the data type boolean.
     * (Reference: SBML Level 3 Version 1 Core, Section 4.1.2.)
 	 */
 	public static final int ARRAYS_10202 = 8010202;

 	/**
 	 * The value of attribute arrays:required on the SBML object must be set to “true” (Reference:
     * SBML Level 3 Package Specification for Arrays, Version 1, Section 3.1 on page 6.)
 	 */
 	public static final int ARRAYS_10203 = 8010203;

 	public static final int ARRAYS_10204 = 8010204;

 	/**
 	 * Wherever MathML content appears in an SBML document, the MathML content must be
 	 * placed within a math element, and that math element must be either explicitly or implicitly
 	 * declared to be in the XML namespace “http://www.w3.org/1998/Math/MathML”. (Reference:
 	 * SBML Level 3 Version 1 Core, Section 3.4.)
 	 * The following is a list of the additional MathML 2.0 elements permitted in the Arrays package:
 	 * vector and selector. (Reference: SBML Level 3 Package Specification for Arrays, Version 1,
 	 * Section 3.5 on page 10.)
 	 */
 	public static final int ARRAYS_10205 = 8010205;

 	/**
 	 * The first argument of a MathML selector must be a MathML vector object or a valid identi-
 	 * fier to an SBase object extended with a list of Dimension objects. (Reference: SBML Level 3
 	 * Package Specification for Arrays, Version 1, Section 3.5 on page 10.)
 	 */
 	public static final int ARRAYS_10206 = 8010206;

    public static final int ARRAYS_10207 = 8010207;
    public static final int ARRAYS_10208 = 8010208;
    public static final int ARRAYS_10209 = 8010209;
    public static final int ARRAYS_10210 = 8010210;
    public static final int ARRAYS_10211 = 8010211;
    public static final int ARRAYS_10212 = 8010212;
    public static final int ARRAYS_10213 = 8010213;
    
    public static final int ARRAYS_20101 = 8020101;
    public static final int ARRAYS_20102 = 8020102;
    public static final int ARRAYS_20103 = 8020103;
    public static final int ARRAYS_20104 = 8020104;
    public static final int ARRAYS_20105 = 8020105;
    public static final int ARRAYS_20106 = 8020106;
    public static final int ARRAYS_20107 = 8020107;
    public static final int ARRAYS_20108 = 8020108;
    public static final int ARRAYS_20109 = 8020109;
    public static final int ARRAYS_20110 = 8020110;
    public static final int ARRAYS_20111 = 8020111;
    public static final int ARRAYS_20112 = 8020112;
    public static final int ARRAYS_20113 = 8020113;
    public static final int ARRAYS_20114 = 8020114;
    public static final int ARRAYS_20115 = 8020115;
    public static final int ARRAYS_20116 = 8020116;

    /**
 	  * A Dimension object may have the optional SBML Level 3 Core attributes metaid and sboTerm.
 	  * No other attributes from the SBML Level 3 Core namespace are permitted on a Dimension
 	  * object. (Reference: SBML Level 3 Version 1 Core, Section 3.2.)
 	  *
 	  */
 	public static final int ARRAYS_20201 = 8020201; 
 	
 	public static final int ARRAYS_20202 = 8020202;
 	public static final int ARRAYS_20203 = 8020203;
 	public static final int ARRAYS_20204 = 8020204;
 	public static final int ARRAYS_20205 = 8020205;
 	
 	public static final int ARRAYS_20301 = 8020301;
    public static final int ARRAYS_20302 = 8020302;
    public static final int ARRAYS_20303 = 8020303;
    public static final int ARRAYS_20304 = 8020304;
    public static final int ARRAYS_20305 = 8020305;
    public static final int ARRAYS_20306 = 8020306;
    public static final int ARRAYS_20307 = 8020307;
 	
 	// At the moment (2016-11), from the draft packages, only multi has some validation in libSBML.

 	// TODO - add by hand the arrays errors
 	
 	/*
 	 * 
 	 * 

General rules about MathML content in the Arrays Package


public static final int ARRAYS_10207 = 8010207; The first argument of a MathML selector must have a number of dimensions equal to
              the number of arguments to the selector minus 1. (Reference: SBML Level 3 Package
             Specification for Arrays, Version 1, Section 3.5 on page 10.)
public static final int ARRAYS_10208 = 8010208; The arguments of a MathML selector other than the first argument must be statically com-
              putable. In other words, any identifier that appears in an argument, other than a Dimension
               id for the corresponding object, must be a constant. (Reference: SBML Level 3 Package
              Specification for Arrays, Version 1, Section 3.5 on page 10.)
public static final int ARRAYS_10209 = 8010209; The arguments of a MathML selector other than the first argument must be evaluated to
              a scalar value. (Reference: SBML Level 3 Package Specification for Arrays, Version 1, Sec-
               tion 3.5 on page 10.)
public static final int ARRAYS_10210 = 8010210; For each possible value of each Dimension id (i.e., 0 to size-1 of the Dimension referred to)
            that appears in the second and later arguments of the selector, there should be no array
           out-of-bounds problems. Namely, it must evaluate to a non-negative integer that is less than
          the size of the corresponding Dimension for the object being indexed where the last argument
         refers to dimension 0, next to last to dimension 1, etc. (Reference: SBML Level 3 Package
        Specification for Arrays, Version 1, Section 3.5 on page 10.)
public static final int ARRAYS_10211 = 8010211; All mathematical operations must be performed on scalar values rather than vectors. (Refer-
            ence: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.5 on page 10.)
public static final int ARRAYS_10212 = 8010212; For MathML operations with two or more operands involving MathML vectors or SBase
            objects with a list of Dimension objects, the number of dimensions and their size must agree
           for all operands unless the operand is a scalar type (i.e., it does not have a list of Dimension
          objects). (Reference: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.5 on
           page 10.)
public static final int ARRAYS_10213 = 8010213; No SBase is allowed to have value of type vector. (Reference: SBML Level 3 Package Specifi-
              cation for Arrays, Version 1, Section 3.5 on page 10.)
              
Rules for the extended SBase abstract class

public static final int ARRAYS_20101 = 8020101; Any object derived from the extended SBase class (defined in the Arrays package) may contain
              at most one instance of a ListOfDimensions. (Reference: SBML Level 3 Package Specification
               for Arrays, Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20102 = 8020102; Apart from the general notes and annotation permitted on all SBML objects, a ListOfDimen-
            sions container object may only contain Dimension objects. (Reference: SBML Level 3 Package
           Specification for Arrays, Version 1, Section 3.3 on page 6.)

public static final int ARRAYS_20103 = 8020103; The ListOfDimensions associated with an SBase object must have a Dimension object with
            arrays:arrayDimension attribute set to 0, 1, . . . , n − 1 before adding a Dimension object with
             arrays:arrayDimension attribute set to n. (Reference: SBML Level 3 Package Specification
              for Arrays, Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20104 The ListOfDimensions associated with an SBase object must not have multiple Dimension
            objects with the same arrays:arrayDimension attribute. (Reference: SBML Level 3 Package
           Specification for Arrays, Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20105 A ListOfDimensions object may have the optional SBML core attributes metaid and sboTerm.
            No other attributes from the SBML Level 3 Core namespace or the Arrays namespace are
           permitted on a ListOfDimensions object. (Reference: SBML Level 3 Package Specification for
            Arrays, Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20106 ListOf objects are not permitted to have a ListOfDimensions. (Reference: SBML Level 3
Package Specification for Arrays, Version 1, Section 3.3 on page 7.)
public static final int ARRAYS_20107 In SBML Level 3 Core, Models, FunctionDefinitions, Units, UnitDefinitions, KineticLaws,
            LocalParameters, Triggers, Priorities, and Delays are not permitted to have a ListOfDi-
           mensions. All other SBML Level 3 Core objects are permitted to have a ListOfDimensions in-
          cluding: Compartments, Species, Parameters, Initial assignments, Rules, Constraints,
         Reactions, Species references, Events, and Event assignments. All SBML objects de-
        fined by packages that inherit from SBase are permitted to have a ListOfDimensions unless it
         is explicitly disallowed in the corresponding package specification. (Reference: SBML Level 3
          Package Specification for Arrays, Version 1, Section 3.3 on page 7.)
public static final int ARRAYS_20108 The Dimension and Index objects are not permitted to have a ListOfDimensions. (Reference:
            SBML Level 3 Package Specification for Arrays, Version 1, Section 3.3 on page 7.)
public static final int ARRAYS_20109 Any object derived from the extended SBase class (defined in the Arrays package) may contain
              at most one instance of a ListOfIndices. (Reference: SBML Level 3 Package Specification for
               Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20110 Apart from the general notes and annotation subobjects permitted on all SBML objects, a
            ListOfIndices container object may only contain Index objects. (Reference: SBML Level 3
           Package Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20111 The ListOfIndices associated with an SBase object must have a Index object with
            arrays:arrayDimension attribute set to 0, 1, . . . , n − 1 before adding a Index object with
             arrays:arrayDimension attribute set to n for every arrays:referencedAttribute that
            are being indexed. (Reference: SBML Level 3 Package Specification for Arrays, Version 1,
             Section 3.3 on page 6.)
public static final int ARRAYS_20112 The ListOfIndices in an SBase object must not have multiple Index objects with the same
            pair of values arrays:arrayDimension and arrays:referencedAttribute attributes. (Ref-
           erence: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20113 A ListOfIndices object may have the optional SBML core attributes metaid and sboTerm. No
            other attributes from the SBML Level 3 Core namespace or the Arrays namespace are permitted
           on a ListOfIndices object. (Reference: SBML Level 3 Package Specification for Arrays, Version 1,
            Section 3.4 on page 8.)
public static final int ARRAYS_20114 Only SBML objects that include defined attributes of type SIdRef are permitted to have a
              ListOfIndices. For SBML Level 3 Core, this includes Model to reference a conversionFactor
             element, Species to reference a compartment or a conversionFactor element, Reactions
to reference a compartment, Initial assignments to reference a symbol, Rules to refer-
ence a variable, Species references to reference a species, and Events assignments
to reference a variable. In addition to these, any SBML object in a package with a defined
attribute of type SIdRef may also have a ListOfIndices. (Reference: SBML Level 3 Package
Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20115 SBase objects containg SIdRef must have a ListOfIndices if the referenced SBase is an array.
            (Reference: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20116 SBase objects containg SIdRef with a ListOfDimensions should have a ListOfIndices contain-
            ing as many Index objects for this particular arrays:referencedAttribute as the number
           of Dimension objects the referenced object contains. (Reference: SBML Level 3 Package
Specification for Arrays, Version 1, Section 3.4 on page 8.)

Rules for Dimension objects
public static final int ARRAYS_20201 A Dimension object may have the optional SBML Level 3 Core attributes metaid and sboTerm.
            No other attributes from the SBML Level 3 Core namespace are permitted on a Dimension
           object. (Reference: SBML Level 3 Version 1 Core, Section 3.2.)
public static final int ARRAYS_20202 A Dimension object must have a value for the attributes arrays:arrayDimension and
            arrays:size, and may additionally have the attributes arrays:id and arrays:name. (Refer-
           ence: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20203 The value of the arrays:arrayDimension attribute on a given Dimension object, must be
            a non-negative integer value. (Reference: SBML Level 3 Package Specification for Arrays,
             Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20204 The value of the arrays:size attribute on a given Dimension object, must be a valid SIdRef
            to an object of type Parameter. (Reference: SBML Level 3 Package Specification for Arrays,
             Version 1, Section 3.3 on page 6.)
public static final int ARRAYS_20205 The value of the Parameter referenced by the arrays:size attribute must be a non-negative
            scalar constant integer. (Reference: SBML Level 3 Package Specification for Arrays, Version 1,
             Section 3.3 on page 6.)
Rules for Index objects
public static final int ARRAYS_20301 An Index object may have the optional SBML Level 3 Core attributes metaid and sboTerm.
            No other attributes from the SBML Level 3 Core namespace are permitted on a Index object.
           (Reference: SBML Level 3 Version 1 Core, Section 3.2.)
public static final int ARRAYS_20302 An Index object must have a value for the attributes arrays:arrayDimension, and
            arrays:referencedAttribute . (Reference: SBML Level 3 Package Specification for Arrays,
             Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20303 The value of the arrays:referencedAttribute attribute on a given Index object, must be an
            existing attribute of type SIdRef with a value that references a valid SId. (Reference: SBML
           Level 3 Package Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20304 The value of the arrays:arrayDimension attribute on a given Index object, must be a non-
            negative integer value. (Reference: SBML Level 3 Package Specification for Arrays, Version 1,
             Section 3.4 on page 8.)
public static final int ARRAYS_20305 The object referenced by the SIdRef indicated by the arrays:referencedAttribute at-
            tribute must include an arrays:arrayDimension matching the arrays:arrayDimension for
the Index. (Reference: SBML Level 3 Package Specification for Arrays, Version 1, Section 3.4 on
page 8.)
public static final int ARRAYS_20306 An Index object must have exactly one MathML math element. (Reference: SBML Level 3
            Package Specification for Arrays, Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20307 The MathML math element in an Index object must be statically computable. In other words,
            any identifier that appears in the math element, other than a Dimension id for the object with
             this Index, must be a constant. (Reference: SBML Level 3 Package Specification for Arrays,
              Version 1, Section 3.4 on page 8.)
public static final int ARRAYS_20308 For each possible value of each Dimension id (i.e., 0 to size-1 of the Dimension referred to)
            that appears in the MathML math element, there should be no array out-of-bounds problems.
           Namely, it must evaluate to a non-negative integer that is less than the size of the corresponding
          Dimension for the object being indexed.

 	 */
